{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"M01/","text":"M01 -","title":"M01"},{"location":"M01/#m01-","text":"","title":"M01 -"},{"location":"M02/","text":"M02 -","title":"M02"},{"location":"M02/#m02-","text":"","title":"M02 -"},{"location":"M03/","text":"M03 - Secure Deployment Index Git Docker","title":"M03"},{"location":"M03/#m03-secure-deployment","text":"","title":"M03 - Secure Deployment"},{"location":"M03/#index","text":"Git Docker","title":"Index"},{"location":"M03/Docker/","text":"How to set up and install Docker. Follow the docker installation tutorial found inside the Install Docker Engine","title":"How to set up and install Docker."},{"location":"M03/Docker/#how-to-set-up-and-install-docker","text":"Follow the docker installation tutorial found inside the Install Docker Engine","title":"How to set up and install Docker."},{"location":"M03/Git/","text":"Git You can entirelly use git reading the documentation found in Git homepage Description Git is a version control software that allows us to keep control and track different software development states. It has different kind of resources such as branches, tags or commits. We use git to maintain our software as well as to work in together with other team members without the need of sending different file versions. It handles the change versions for us. Initialization Just run git init or clone a repository from the cloud. Resources Remotes Get scm Remote Whe you work with a git repository it is also possible to have a reference to a remote one. For example, I create a repository in (github, altassian, gitea or gitlab) and I clone this repository locally. How many repositories are right now? After cloning a remote repository inside your local machine you leads into a 2 repository maintainance. This means that all the changes that you apply inside your local repository won't be updated automatically to the remote one, this will need to be set explicitelly. Branches Git scm branch We use branches to handle different unique versions of our code. Each branch can have commits, the commits are the representation of a persistent change inside a branch. Explain do you see running the following commands. mkdir test1 cd test1 && git init git branch Commits Git scm Commit A commit is a representation of an state of your package. When a commit is added into a branch it means we want to save some changes included in that commit. Commits are persisted inside a branch and they can be shared between branches. The following picture shows how the commits and branches can live together. Inside a working repository we have an stage. The stage is where we can control what we want to include in the commit. What will happen if I apply the following commands? mkdir test1 cd test1 && git init touch a.txt git commit -m \"added a file\" git status Add Git scm Add This command is used to control the stage that will be used to create commits. Explain the result of following commands: mkdir test1 cd test1 && git init touch a.txt gst git add a.txt gst After adding a file into the stage we will fill our commit context before it's created, this way we include changes into our current branch. Commit your changes git commit -m 'added a file' Log Git scm Log Using git log we can see all the commits from our current working branch. An example: commit 6f7ff25908510451539279f266d5a46de233a1bf (HEAD -> main, origin/main) Author: Porky pig <porkypig@looneytoons.com> Date: Fri Jun 3 21:45:42 2022 +0200 feat: installed mkdocs-gitbook and main folder structure created Pess Q to leave the log view Checkout Git scm Checkout We can change between branches when we are working on a project. The way git is designed allows different devs to work in different subjects of the same git repository just doing their own tasks in a sepparated branch. Checkout also allows us to create different branches from the one we already have. For the following example we suppose that we already have a repository created with a commit that has the file a.txt included. Execute the following commands and explain the results: mkdir test1 cd test1 && git init touch a.txt git add a.txt git commit -m 'added a file' git checkout -b file_b touch b.txt git add b.txt git commit -m 'added b file' git checkout master When you apply a checkout the files that have changes and the stage will be moved to the target branch. To control this behavior we can use the stash . Git scm Stash Merge Git scm Merge This command will take the last commit from one branch and will try to unify it with the current one. So if we are in master and we do: git merge file_b it will pick the last commit from the branch file_b and will create a new commit in master that will have the changes from master and file_b unified. Execute the following commands and explain the results. mkdir test1 cd test1 && git init touch a.txt git add a.txt git commit -m 'added a file' git checkout -b file_b touch b.txt git add b.txt git commit -m 'added b file' git checkout master git merge file_b Reference Git reference","title":"Git"},{"location":"M03/Git/#git","text":"You can entirelly use git reading the documentation found in Git homepage","title":"Git"},{"location":"M03/Git/#description","text":"Git is a version control software that allows us to keep control and track different software development states. It has different kind of resources such as branches, tags or commits. We use git to maintain our software as well as to work in together with other team members without the need of sending different file versions. It handles the change versions for us.","title":"Description"},{"location":"M03/Git/#initialization","text":"Just run git init or clone a repository from the cloud.","title":"Initialization"},{"location":"M03/Git/#resources","text":"","title":"Resources"},{"location":"M03/Git/#remotes","text":"Get scm Remote Whe you work with a git repository it is also possible to have a reference to a remote one. For example, I create a repository in (github, altassian, gitea or gitlab) and I clone this repository locally. How many repositories are right now? After cloning a remote repository inside your local machine you leads into a 2 repository maintainance. This means that all the changes that you apply inside your local repository won't be updated automatically to the remote one, this will need to be set explicitelly.","title":"Remotes"},{"location":"M03/Git/#branches","text":"Git scm branch We use branches to handle different unique versions of our code. Each branch can have commits, the commits are the representation of a persistent change inside a branch. Explain do you see running the following commands. mkdir test1 cd test1 && git init git branch","title":"Branches"},{"location":"M03/Git/#commits","text":"Git scm Commit A commit is a representation of an state of your package. When a commit is added into a branch it means we want to save some changes included in that commit. Commits are persisted inside a branch and they can be shared between branches. The following picture shows how the commits and branches can live together. Inside a working repository we have an stage. The stage is where we can control what we want to include in the commit. What will happen if I apply the following commands? mkdir test1 cd test1 && git init touch a.txt git commit -m \"added a file\" git status","title":"Commits"},{"location":"M03/Git/#add","text":"Git scm Add This command is used to control the stage that will be used to create commits. Explain the result of following commands: mkdir test1 cd test1 && git init touch a.txt gst git add a.txt gst After adding a file into the stage we will fill our commit context before it's created, this way we include changes into our current branch. Commit your changes git commit -m 'added a file'","title":"Add"},{"location":"M03/Git/#log","text":"Git scm Log Using git log we can see all the commits from our current working branch. An example: commit 6f7ff25908510451539279f266d5a46de233a1bf (HEAD -> main, origin/main) Author: Porky pig <porkypig@looneytoons.com> Date: Fri Jun 3 21:45:42 2022 +0200 feat: installed mkdocs-gitbook and main folder structure created Pess Q to leave the log view","title":"Log"},{"location":"M03/Git/#checkout","text":"Git scm Checkout We can change between branches when we are working on a project. The way git is designed allows different devs to work in different subjects of the same git repository just doing their own tasks in a sepparated branch. Checkout also allows us to create different branches from the one we already have. For the following example we suppose that we already have a repository created with a commit that has the file a.txt included. Execute the following commands and explain the results: mkdir test1 cd test1 && git init touch a.txt git add a.txt git commit -m 'added a file' git checkout -b file_b touch b.txt git add b.txt git commit -m 'added b file' git checkout master When you apply a checkout the files that have changes and the stage will be moved to the target branch. To control this behavior we can use the stash . Git scm Stash","title":"Checkout"},{"location":"M03/Git/#merge","text":"Git scm Merge This command will take the last commit from one branch and will try to unify it with the current one. So if we are in master and we do: git merge file_b it will pick the last commit from the branch file_b and will create a new commit in master that will have the changes from master and file_b unified. Execute the following commands and explain the results. mkdir test1 cd test1 && git init touch a.txt git add a.txt git commit -m 'added a file' git checkout -b file_b touch b.txt git add b.txt git commit -m 'added b file' git checkout master git merge file_b","title":"Merge"},{"location":"M03/Git/#reference","text":"Git reference","title":"Reference"},{"location":"M04/","text":"M04 -","title":"M04"},{"location":"M04/#m04-","text":"","title":"M04 -"},{"location":"M05/","text":"M05 -","title":"M05"},{"location":"M05/#m05-","text":"","title":"M05 -"},{"location":"M06/","text":"M06 -","title":"M06"},{"location":"M06/#m06-","text":"","title":"M06 -"},{"location":"architecture/","text":"Architecture","title":"Architecture"},{"location":"architecture/#architecture","text":"","title":"Architecture"},{"location":"architecture/VPN/","text":"VPN Connection Deployed VPN","title":"VPN Connection"},{"location":"architecture/VPN/#vpn-connection","text":"Deployed VPN","title":"VPN Connection"}]}